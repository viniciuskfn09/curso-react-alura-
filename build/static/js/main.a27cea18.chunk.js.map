{"version":3,"sources":["UserList.js","UserPage.js","App.js","serviceWorker.js","index.js"],"names":["UserList","users","map","user","key","id","to","name","UserPage","addNote","removeNote","useParams","find","parseInt","useState","note","setNote","points","setPoints","calculateTotalPoints","notes","reduce","total","rankedUsers","u","totalPoints","sort","a","b","userRank","findIndex","className","index","text","onClick","handleRemoveNote","type","value","onChange","e","target","placeholder","Number","length","App","setUsers","path","element","userId","noteIndex","filter","_","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.a27cea18.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './UserList.css'\r\n\r\nconst UserList = ({ users }) => {\r\n  return (\r\n    <div>\r\n      <h2>Usuários</h2>\r\n      <ul>\r\n        {users.map(user => (\r\n          <li key={user.id}>\r\n            <Link to={`/user/${user.id}`}>{user.name}</Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserList;\r\n","import React, { useState } from 'react';\r\nimport { useParams, Link } from 'react-router-dom';\r\nimport './UserPage.css';\r\n\r\nconst UserPage = ({ users, addNote, removeNote }) => {\r\n  const { id } = useParams();\r\n  const user = users.find(user => user.id === parseInt(id));\r\n  const [note, setNote] = useState('');\r\n  const [points, setPoints] = useState(3);\r\n\r\n  if (!user) return <p>Usuário não encontrado</p>;\r\n\r\n  const handleAddNote = () => {\r\n    addNote(user.id, { text: note, points });\r\n    setNote('');\r\n    setPoints(3); // Reset points to default\r\n  };\r\n\r\n  const handleRemoveNote = (index) => {\r\n    removeNote(user.id, index);\r\n  };\r\n\r\n  const calculateTotalPoints = (user) => {\r\n    return user.notes.reduce((total, note) => total + note.points, 0);\r\n  };\r\n\r\n  const getRankedUsers = () => {\r\n    return [...users]\r\n      .map(u => ({\r\n        ...u,\r\n        totalPoints: calculateTotalPoints(u)\r\n      }))\r\n      .sort((a, b) => b.totalPoints - a.totalPoints);\r\n  };\r\n\r\n  const rankedUsers = getRankedUsers();\r\n  const userRank = rankedUsers.findIndex(u => u.id === user.id) + 1;\r\n\r\n  return (\r\n    <div className=\"user-page-container\">\r\n      <aside className=\"sidebar\">\r\n        <h3>Usuários</h3>\r\n        <ul>\r\n          {rankedUsers.map(u => (\r\n            <li key={u.id}>\r\n              <Link to={`/user/${u.id}`}>{u.name}</Link>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </aside>\r\n      <main className=\"user-details\">\r\n        <h2>{user.name}</h2>\r\n        <Link to=\"/\" className=\"back-link\">Voltar para a lista de usuários</Link>\r\n        <ul>\r\n          {user.notes.map((note, index) => (\r\n            <li key={index}>\r\n              {note.text} - {note.points} pontos\r\n              <button className=\"remove-btn\" onClick={() => handleRemoveNote(index)}>Excluir</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n        <div className=\"note-form\">\r\n          <input\r\n            type=\"text\"\r\n            value={note}\r\n            onChange={(e) => setNote(e.target.value)}\r\n            placeholder=\"Adicione uma nota\"\r\n          />\r\n          <select value={points} onChange={(e) => setPoints(Number(e.target.value))}>\r\n            <option value={3}>3 pontos</option>\r\n            <option value={6}>6 pontos</option>\r\n            <option value={9}>9 pontos</option>\r\n          </select>\r\n          <button onClick={handleAddNote}>Adicionar Nota</button>\r\n        </div>\r\n        <div className=\"total-points\">\r\n          <h3>Total de Pontos: {calculateTotalPoints(user)}</h3>\r\n          <h4>Rank: {userRank} / {rankedUsers.length}</h4>\r\n        </div>\r\n        <div className=\"ranking\">\r\n          <h3>Ranking dos Usuários</h3>\r\n          <ul>\r\n            {rankedUsers.map((u, index) => (\r\n              <li key={u.id}>\r\n                {index + 1}. {u.name} - {calculateTotalPoints(u)} pontos\r\n              </li>\r\n            ))}\r\n          </ul>\r\n        </div>\r\n      </main>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserPage;\r\n","import React, { useState } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport UserList from './UserList';\nimport UserPage from './UserPage';\nimport './App.css';\n\nconst App = () => {\n  const [users, setUsers] = useState([\n    { id: 1, name: 'VicBoça', notes: [] },\n    { id: 2, name: 'ViniBoça', notes: [] },\n    { id: 3, name: 'Manaia VVQueiro', notes: [] },\n    { id: 4, name: 'Cazenrique', notes: [] },\n    { id: 5, name: 'Lucena', notes: [] },\n    { id: 6, name: 'Bréqui Silva', notes: [] }\n  ]);\n\n  const addNote = (userId, note) => {\n    setUsers(users.map(user =>\n      user.id === userId ? { ...user, notes: [...user.notes, note] } : user\n    ));\n  };\n\n  const removeNote = (userId, noteIndex) => {\n    setUsers(users.map(user =>\n      user.id === userId ? { ...user, notes: user.notes.filter((_, index) => index !== noteIndex) } : user\n    ));\n  };\n\n  return (\n    <Router>\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"/\" element={<UserList users={users} />} />\n          <Route path=\"/user/:id\" element={<UserPage users={users} addNote={addNote} removeNote={removeNote} />} />\n        </Routes>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}