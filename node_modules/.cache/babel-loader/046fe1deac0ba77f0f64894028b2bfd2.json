{"ast":null,"code":"import { getRange } from './dates.js';\n/**\n * Returns a value no smaller than min and no larger than max.\n *\n * @param {Date} value Value to return.\n * @param {Date} min Minimum return value.\n * @param {Date} max Maximum return value.\n * @returns {Date} Value between min and max.\n */\n\nexport function between(value, min, max) {\n  if (min && min > value) {\n    return min;\n  }\n\n  if (max && max < value) {\n    return max;\n  }\n\n  return value;\n}\nexport function isValueWithinRange(value, range) {\n  return range[0] <= value && range[1] >= value;\n}\nexport function isRangeWithinRange(greaterRange, smallerRange) {\n  return greaterRange[0] <= smallerRange[0] && greaterRange[1] >= smallerRange[1];\n}\nexport function doRangesOverlap(range1, range2) {\n  return isValueWithinRange(range1[0], range2) || isValueWithinRange(range1[1], range2);\n}\n\nfunction getRangeClassNames(valueRange, dateRange, baseClassName) {\n  var isRange = doRangesOverlap(dateRange, valueRange);\n  var classes = [];\n\n  if (isRange) {\n    classes.push(baseClassName);\n    var isRangeStart = isValueWithinRange(valueRange[0], dateRange);\n    var isRangeEnd = isValueWithinRange(valueRange[1], dateRange);\n\n    if (isRangeStart) {\n      classes.push(\"\".concat(baseClassName, \"Start\"));\n    }\n\n    if (isRangeEnd) {\n      classes.push(\"\".concat(baseClassName, \"End\"));\n    }\n\n    if (isRangeStart && isRangeEnd) {\n      classes.push(\"\".concat(baseClassName, \"BothEnds\"));\n    }\n  }\n\n  return classes;\n}\n\nfunction isCompleteValue(value) {\n  if (Array.isArray(value)) {\n    return value[0] !== null && value[1] !== null;\n  }\n\n  return value !== null;\n}\n\nexport function getTileClasses(args) {\n  if (!args) {\n    throw new Error('args is required');\n  }\n\n  var value = args.value,\n      date = args.date,\n      hover = args.hover;\n  var className = 'react-calendar__tile';\n  var classes = [className];\n\n  if (!date) {\n    return classes;\n  }\n\n  var now = new Date();\n\n  var dateRange = function () {\n    if (Array.isArray(date)) {\n      return date;\n    }\n\n    var dateType = args.dateType;\n\n    if (!dateType) {\n      throw new Error('dateType is required when date is not an array of two dates');\n    }\n\n    return getRange(dateType, date);\n  }();\n\n  if (isValueWithinRange(now, dateRange)) {\n    classes.push(\"\".concat(className, \"--now\"));\n  }\n\n  if (!value || !isCompleteValue(value)) {\n    return classes;\n  }\n\n  var valueRange = function () {\n    if (Array.isArray(value)) {\n      return value;\n    }\n\n    var valueType = args.valueType;\n\n    if (!valueType) {\n      throw new Error('valueType is required when value is not an array of two dates');\n    }\n\n    return getRange(valueType, value);\n  }();\n\n  if (isRangeWithinRange(valueRange, dateRange)) {\n    classes.push(\"\".concat(className, \"--active\"));\n  } else if (doRangesOverlap(valueRange, dateRange)) {\n    classes.push(\"\".concat(className, \"--hasActive\"));\n  }\n\n  var valueRangeClassNames = getRangeClassNames(valueRange, dateRange, \"\".concat(className, \"--range\"));\n  classes.push.apply(classes, valueRangeClassNames);\n  var valueArray = Array.isArray(value) ? value : [value];\n\n  if (hover && valueArray.length === 1) {\n    var hoverRange = hover > valueRange[0] ? [valueRange[0], hover] : [hover, valueRange[0]];\n    var hoverRangeClassNames = getRangeClassNames(hoverRange, dateRange, \"\".concat(className, \"--hover\"));\n    classes.push.apply(classes, hoverRangeClassNames);\n  }\n\n  return classes;\n}","map":{"version":3,"sources":["C:/Users/Lenovo/Documents/REACT/curso-react-alura/node_modules/react-calendar/dist/esm/shared/utils.js"],"names":["getRange","between","value","min","max","isValueWithinRange","range","isRangeWithinRange","greaterRange","smallerRange","doRangesOverlap","range1","range2","getRangeClassNames","valueRange","dateRange","baseClassName","isRange","classes","push","isRangeStart","isRangeEnd","concat","isCompleteValue","Array","isArray","getTileClasses","args","Error","date","hover","className","now","Date","dateType","valueType","valueRangeClassNames","apply","valueArray","length","hoverRange","hoverRangeClassNames"],"mappings":"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","sourcesContent":["import { getRange } from './dates.js';\n/**\n * Returns a value no smaller than min and no larger than max.\n *\n * @param {Date} value Value to return.\n * @param {Date} min Minimum return value.\n * @param {Date} max Maximum return value.\n * @returns {Date} Value between min and max.\n */\nexport function between(value, min, max) {\n    if (min && min > value) {\n        return min;\n    }\n    if (max && max < value) {\n        return max;\n    }\n    return value;\n}\nexport function isValueWithinRange(value, range) {\n    return range[0] <= value && range[1] >= value;\n}\nexport function isRangeWithinRange(greaterRange, smallerRange) {\n    return greaterRange[0] <= smallerRange[0] && greaterRange[1] >= smallerRange[1];\n}\nexport function doRangesOverlap(range1, range2) {\n    return isValueWithinRange(range1[0], range2) || isValueWithinRange(range1[1], range2);\n}\nfunction getRangeClassNames(valueRange, dateRange, baseClassName) {\n    var isRange = doRangesOverlap(dateRange, valueRange);\n    var classes = [];\n    if (isRange) {\n        classes.push(baseClassName);\n        var isRangeStart = isValueWithinRange(valueRange[0], dateRange);\n        var isRangeEnd = isValueWithinRange(valueRange[1], dateRange);\n        if (isRangeStart) {\n            classes.push(\"\".concat(baseClassName, \"Start\"));\n        }\n        if (isRangeEnd) {\n            classes.push(\"\".concat(baseClassName, \"End\"));\n        }\n        if (isRangeStart && isRangeEnd) {\n            classes.push(\"\".concat(baseClassName, \"BothEnds\"));\n        }\n    }\n    return classes;\n}\nfunction isCompleteValue(value) {\n    if (Array.isArray(value)) {\n        return value[0] !== null && value[1] !== null;\n    }\n    return value !== null;\n}\nexport function getTileClasses(args) {\n    if (!args) {\n        throw new Error('args is required');\n    }\n    var value = args.value, date = args.date, hover = args.hover;\n    var className = 'react-calendar__tile';\n    var classes = [className];\n    if (!date) {\n        return classes;\n    }\n    var now = new Date();\n    var dateRange = (function () {\n        if (Array.isArray(date)) {\n            return date;\n        }\n        var dateType = args.dateType;\n        if (!dateType) {\n            throw new Error('dateType is required when date is not an array of two dates');\n        }\n        return getRange(dateType, date);\n    })();\n    if (isValueWithinRange(now, dateRange)) {\n        classes.push(\"\".concat(className, \"--now\"));\n    }\n    if (!value || !isCompleteValue(value)) {\n        return classes;\n    }\n    var valueRange = (function () {\n        if (Array.isArray(value)) {\n            return value;\n        }\n        var valueType = args.valueType;\n        if (!valueType) {\n            throw new Error('valueType is required when value is not an array of two dates');\n        }\n        return getRange(valueType, value);\n    })();\n    if (isRangeWithinRange(valueRange, dateRange)) {\n        classes.push(\"\".concat(className, \"--active\"));\n    }\n    else if (doRangesOverlap(valueRange, dateRange)) {\n        classes.push(\"\".concat(className, \"--hasActive\"));\n    }\n    var valueRangeClassNames = getRangeClassNames(valueRange, dateRange, \"\".concat(className, \"--range\"));\n    classes.push.apply(classes, valueRangeClassNames);\n    var valueArray = Array.isArray(value) ? value : [value];\n    if (hover && valueArray.length === 1) {\n        var hoverRange = hover > valueRange[0] ? [valueRange[0], hover] : [hover, valueRange[0]];\n        var hoverRangeClassNames = getRangeClassNames(hoverRange, dateRange, \"\".concat(className, \"--hover\"));\n        classes.push.apply(classes, hoverRangeClassNames);\n    }\n    return classes;\n}\n"]},"metadata":{},"sourceType":"module"}