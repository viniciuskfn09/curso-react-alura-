{"ast":null,"code":"import { getYear, getMonth as getMonthIndex, getCenturyStart, getPreviousCenturyStart, getNextCenturyStart, getCenturyEnd, getPreviousCenturyEnd, getCenturyRange, getDecadeStart, getPreviousDecadeStart, getNextDecadeStart, getDecadeEnd, getPreviousDecadeEnd, getDecadeRange, getYearStart, getPreviousYearStart, getNextYearStart, getYearEnd, getPreviousYearEnd, getYearRange, getMonthStart, getPreviousMonthStart, getNextMonthStart, getMonthEnd, getPreviousMonthEnd, getMonthRange, getDayStart, getDayEnd, getDayRange } from '@wojtekmaj/date-utils';\nimport { CALENDAR_TYPES, WEEKDAYS } from './const.js';\nimport { formatYear as defaultFormatYear } from './dateFormatter.js';\nvar SUNDAY = WEEKDAYS[0];\nvar FRIDAY = WEEKDAYS[5];\nvar SATURDAY = WEEKDAYS[6];\n/* Simple getters - getting a property of a given point in time */\n\n/**\n * Gets day of the week of a given date.\n * @param {Date} date Date.\n * @param {CalendarType} [calendarType=\"iso8601\"] Calendar type.\n * @returns {number} Day of the week.\n */\n\nexport function getDayOfWeek(date, calendarType) {\n  if (calendarType === void 0) {\n    calendarType = CALENDAR_TYPES.ISO_8601;\n  }\n\n  var weekday = date.getDay();\n\n  switch (calendarType) {\n    case CALENDAR_TYPES.ISO_8601:\n      // Shifts days of the week so that Monday is 0, Sunday is 6\n      return (weekday + 6) % 7;\n\n    case CALENDAR_TYPES.ISLAMIC:\n      return (weekday + 1) % 7;\n\n    case CALENDAR_TYPES.HEBREW:\n    case CALENDAR_TYPES.GREGORY:\n      return weekday;\n\n    default:\n      throw new Error('Unsupported calendar type.');\n  }\n}\n/**\n * Century\n */\n\n/**\n * Gets the year of the beginning of a century of a given date.\n * @param {Date} date Date.\n * @returns {number} Year of the beginning of a century.\n */\n\nexport function getBeginOfCenturyYear(date) {\n  var beginOfCentury = getCenturyStart(date);\n  return getYear(beginOfCentury);\n}\n/**\n * Decade\n */\n\n/**\n * Gets the year of the beginning of a decade of a given date.\n * @param {Date} date Date.\n * @returns {number} Year of the beginning of a decade.\n */\n\nexport function getBeginOfDecadeYear(date) {\n  var beginOfDecade = getDecadeStart(date);\n  return getYear(beginOfDecade);\n}\n/**\n * Week\n */\n\n/**\n * Returns the beginning of a given week.\n *\n * @param {Date} date Date.\n * @param {CalendarType} [calendarType=\"iso8601\"] Calendar type.\n * @returns {Date} Beginning of a given week.\n */\n\nexport function getBeginOfWeek(date, calendarType) {\n  if (calendarType === void 0) {\n    calendarType = CALENDAR_TYPES.ISO_8601;\n  }\n\n  var year = getYear(date);\n  var monthIndex = getMonthIndex(date);\n  var day = date.getDate() - getDayOfWeek(date, calendarType);\n  return new Date(year, monthIndex, day);\n}\n/**\n * Gets week number according to ISO 8601 or US standard.\n * In ISO 8601, Arabic and Hebrew week 1 is the one with January 4.\n * In US calendar week 1 is the one with January 1.\n *\n * @param {Date} date Date.\n * @param {CalendarType} [calendarType=\"iso8601\"] Calendar type.\n * @returns {number} Week number.\n */\n\nexport function getWeekNumber(date, calendarType) {\n  if (calendarType === void 0) {\n    calendarType = CALENDAR_TYPES.ISO_8601;\n  }\n\n  var calendarTypeForWeekNumber = calendarType === CALENDAR_TYPES.GREGORY ? CALENDAR_TYPES.GREGORY : CALENDAR_TYPES.ISO_8601;\n  var beginOfWeek = getBeginOfWeek(date, calendarType);\n  var year = getYear(date) + 1;\n  var dayInWeekOne;\n  var beginOfFirstWeek; // Look for the first week one that does not come after a given date\n\n  do {\n    dayInWeekOne = new Date(year, 0, calendarTypeForWeekNumber === CALENDAR_TYPES.ISO_8601 ? 4 : 1);\n    beginOfFirstWeek = getBeginOfWeek(dayInWeekOne, calendarType);\n    year -= 1;\n  } while (date < beginOfFirstWeek);\n\n  return Math.round((beginOfWeek.getTime() - beginOfFirstWeek.getTime()) / (8.64e7 * 7)) + 1;\n}\n/**\n * Others\n */\n\n/**\n * Returns the beginning of a given range.\n *\n * @param {RangeType} rangeType Range type (e.g. 'day')\n * @param {Date} date Date.\n * @returns {Date} Beginning of a given range.\n */\n\nexport function getBegin(rangeType, date) {\n  switch (rangeType) {\n    case 'century':\n      return getCenturyStart(date);\n\n    case 'decade':\n      return getDecadeStart(date);\n\n    case 'year':\n      return getYearStart(date);\n\n    case 'month':\n      return getMonthStart(date);\n\n    case 'day':\n      return getDayStart(date);\n\n    default:\n      throw new Error(\"Invalid rangeType: \".concat(rangeType));\n  }\n}\n/**\n * Returns the beginning of a previous given range.\n *\n * @param {RangeType} rangeType Range type (e.g. 'day')\n * @param {Date} date Date.\n * @returns {Date} Beginning of a previous given range.\n */\n\nexport function getBeginPrevious(rangeType, date) {\n  switch (rangeType) {\n    case 'century':\n      return getPreviousCenturyStart(date);\n\n    case 'decade':\n      return getPreviousDecadeStart(date);\n\n    case 'year':\n      return getPreviousYearStart(date);\n\n    case 'month':\n      return getPreviousMonthStart(date);\n\n    default:\n      throw new Error(\"Invalid rangeType: \".concat(rangeType));\n  }\n}\n/**\n * Returns the beginning of a next given range.\n *\n * @param {RangeType} rangeType Range type (e.g. 'day')\n * @param {Date} date Date.\n * @returns {Date} Beginning of a next given range.\n */\n\nexport function getBeginNext(rangeType, date) {\n  switch (rangeType) {\n    case 'century':\n      return getNextCenturyStart(date);\n\n    case 'decade':\n      return getNextDecadeStart(date);\n\n    case 'year':\n      return getNextYearStart(date);\n\n    case 'month':\n      return getNextMonthStart(date);\n\n    default:\n      throw new Error(\"Invalid rangeType: \".concat(rangeType));\n  }\n}\nexport function getBeginPrevious2(rangeType, date) {\n  switch (rangeType) {\n    case 'decade':\n      return getPreviousDecadeStart(date, -100);\n\n    case 'year':\n      return getPreviousYearStart(date, -10);\n\n    case 'month':\n      return getPreviousMonthStart(date, -12);\n\n    default:\n      throw new Error(\"Invalid rangeType: \".concat(rangeType));\n  }\n}\nexport function getBeginNext2(rangeType, date) {\n  switch (rangeType) {\n    case 'decade':\n      return getNextDecadeStart(date, 100);\n\n    case 'year':\n      return getNextYearStart(date, 10);\n\n    case 'month':\n      return getNextMonthStart(date, 12);\n\n    default:\n      throw new Error(\"Invalid rangeType: \".concat(rangeType));\n  }\n}\n/**\n * Returns the end of a given range.\n *\n * @param {RangeType} rangeType Range type (e.g. 'day')\n * @param {Date} date Date.\n * @returns {Date} End of a given range.\n */\n\nexport function getEnd(rangeType, date) {\n  switch (rangeType) {\n    case 'century':\n      return getCenturyEnd(date);\n\n    case 'decade':\n      return getDecadeEnd(date);\n\n    case 'year':\n      return getYearEnd(date);\n\n    case 'month':\n      return getMonthEnd(date);\n\n    case 'day':\n      return getDayEnd(date);\n\n    default:\n      throw new Error(\"Invalid rangeType: \".concat(rangeType));\n  }\n}\n/**\n * Returns the end of a previous given range.\n *\n * @param {RangeType} rangeType Range type (e.g. 'day')\n * @param {Date} date Date.\n * @returns {Date} End of a previous given range.\n */\n\nexport function getEndPrevious(rangeType, date) {\n  switch (rangeType) {\n    case 'century':\n      return getPreviousCenturyEnd(date);\n\n    case 'decade':\n      return getPreviousDecadeEnd(date);\n\n    case 'year':\n      return getPreviousYearEnd(date);\n\n    case 'month':\n      return getPreviousMonthEnd(date);\n\n    default:\n      throw new Error(\"Invalid rangeType: \".concat(rangeType));\n  }\n}\nexport function getEndPrevious2(rangeType, date) {\n  switch (rangeType) {\n    case 'decade':\n      return getPreviousDecadeEnd(date, -100);\n\n    case 'year':\n      return getPreviousYearEnd(date, -10);\n\n    case 'month':\n      return getPreviousMonthEnd(date, -12);\n\n    default:\n      throw new Error(\"Invalid rangeType: \".concat(rangeType));\n  }\n}\n/**\n * Returns an array with the beginning and the end of a given range.\n *\n * @param {RangeType} rangeType Range type (e.g. 'day')\n * @param {Date} date Date.\n * @returns {Date[]} Beginning and end of a given range.\n */\n\nexport function getRange(rangeType, date) {\n  switch (rangeType) {\n    case 'century':\n      return getCenturyRange(date);\n\n    case 'decade':\n      return getDecadeRange(date);\n\n    case 'year':\n      return getYearRange(date);\n\n    case 'month':\n      return getMonthRange(date);\n\n    case 'day':\n      return getDayRange(date);\n\n    default:\n      throw new Error(\"Invalid rangeType: \".concat(rangeType));\n  }\n}\n/**\n * Creates a range out of two values, ensuring they are in order and covering entire period ranges.\n *\n * @param {RangeType} rangeType Range type (e.g. 'day')\n * @param {Date} date1 First date.\n * @param {Date} date2 Second date.\n * @returns {Date[]} Beginning and end of a given range.\n */\n\nexport function getValueRange(rangeType, date1, date2) {\n  var rawNextValue = [date1, date2].sort(function (a, b) {\n    return a.getTime() - b.getTime();\n  });\n  return [getBegin(rangeType, rawNextValue[0]), getEnd(rangeType, rawNextValue[1])];\n}\n\nfunction toYearLabel(locale, formatYear, dates) {\n  if (formatYear === void 0) {\n    formatYear = defaultFormatYear;\n  }\n\n  return dates.map(function (date) {\n    return formatYear(locale, date);\n  }).join(' â€“ ');\n}\n/**\n * @callback FormatYear\n * @param {string} locale Locale.\n * @param {Date} date Date.\n * @returns {string} Formatted year.\n */\n\n/**\n * Returns a string labelling a century of a given date.\n * For example, for 2017 it will return 2001-2100.\n *\n * @param {string} locale Locale.\n * @param {FormatYear} formatYear Function to format a year.\n * @param {Date|string|number} date Date or a year as a string or as a number.\n * @returns {string} String labelling a century of a given date.\n */\n\n\nexport function getCenturyLabel(locale, formatYear, date) {\n  return toYearLabel(locale, formatYear, getCenturyRange(date));\n}\n/**\n * Returns a string labelling a decade of a given date.\n * For example, for 2017 it will return 2011-2020.\n *\n * @param {string} locale Locale.\n * @param {FormatYear} formatYear Function to format a year.\n * @param {Date|string|number} date Date or a year as a string or as a number.\n * @returns {string} String labelling a decade of a given date.\n */\n\nexport function getDecadeLabel(locale, formatYear, date) {\n  return toYearLabel(locale, formatYear, getDecadeRange(date));\n}\n/**\n * Returns a boolean determining whether a given date is the current day of the week.\n *\n * @param {Date} date Date.\n * @returns {boolean} Whether a given date is the current day of the week.\n */\n\nexport function isCurrentDayOfWeek(date) {\n  return date.getDay() === new Date().getDay();\n}\n/**\n * Returns a boolean determining whether a given date is a weekend day.\n *\n * @param {Date} date Date.\n * @param {CalendarType} [calendarType=\"iso8601\"] Calendar type.\n * @returns {boolean} Whether a given date is a weekend day.\n */\n\nexport function isWeekend(date, calendarType) {\n  if (calendarType === void 0) {\n    calendarType = CALENDAR_TYPES.ISO_8601;\n  }\n\n  var weekday = date.getDay();\n\n  switch (calendarType) {\n    case CALENDAR_TYPES.ISLAMIC:\n    case CALENDAR_TYPES.HEBREW:\n      return weekday === FRIDAY || weekday === SATURDAY;\n\n    case CALENDAR_TYPES.ISO_8601:\n    case CALENDAR_TYPES.GREGORY:\n      return weekday === SATURDAY || weekday === SUNDAY;\n\n    default:\n      throw new Error('Unsupported calendar type.');\n  }\n}","map":{"version":3,"sources":["C:/Users/Lenovo/Documents/REACT/curso-react-alura/node_modules/react-calendar/dist/esm/shared/dates.js"],"names":["getYear","getMonth","getMonthIndex","getCenturyStart","getPreviousCenturyStart","getNextCenturyStart","getCenturyEnd","getPreviousCenturyEnd","getCenturyRange","getDecadeStart","getPreviousDecadeStart","getNextDecadeStart","getDecadeEnd","getPreviousDecadeEnd","getDecadeRange","getYearStart","getPreviousYearStart","getNextYearStart","getYearEnd","getPreviousYearEnd","getYearRange","getMonthStart","getPreviousMonthStart","getNextMonthStart","getMonthEnd","getPreviousMonthEnd","getMonthRange","getDayStart","getDayEnd","getDayRange","CALENDAR_TYPES","WEEKDAYS","formatYear","defaultFormatYear","SUNDAY","FRIDAY","SATURDAY","getDayOfWeek","date","calendarType","ISO_8601","weekday","getDay","ISLAMIC","HEBREW","GREGORY","Error","getBeginOfCenturyYear","beginOfCentury","getBeginOfDecadeYear","beginOfDecade","getBeginOfWeek","year","monthIndex","day","getDate","Date","getWeekNumber","calendarTypeForWeekNumber","beginOfWeek","dayInWeekOne","beginOfFirstWeek","Math","round","getTime","getBegin","rangeType","concat","getBeginPrevious","getBeginNext","getBeginPrevious2","getBeginNext2","getEnd","getEndPrevious","getEndPrevious2","getRange","getValueRange","date1","date2","rawNextValue","sort","a","b","toYearLabel","locale","dates","map","join","getCenturyLabel","getDecadeLabel","isCurrentDayOfWeek","isWeekend"],"mappings":"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","sourcesContent":["import { getYear, getMonth as getMonthIndex, getCenturyStart, getPreviousCenturyStart, getNextCenturyStart, getCenturyEnd, getPreviousCenturyEnd, getCenturyRange, getDecadeStart, getPreviousDecadeStart, getNextDecadeStart, getDecadeEnd, getPreviousDecadeEnd, getDecadeRange, getYearStart, getPreviousYearStart, getNextYearStart, getYearEnd, getPreviousYearEnd, getYearRange, getMonthStart, getPreviousMonthStart, getNextMonthStart, getMonthEnd, getPreviousMonthEnd, getMonthRange, getDayStart, getDayEnd, getDayRange, } from '@wojtekmaj/date-utils';\nimport { CALENDAR_TYPES, WEEKDAYS } from './const.js';\nimport { formatYear as defaultFormatYear } from './dateFormatter.js';\nvar SUNDAY = WEEKDAYS[0];\nvar FRIDAY = WEEKDAYS[5];\nvar SATURDAY = WEEKDAYS[6];\n/* Simple getters - getting a property of a given point in time */\n/**\n * Gets day of the week of a given date.\n * @param {Date} date Date.\n * @param {CalendarType} [calendarType=\"iso8601\"] Calendar type.\n * @returns {number} Day of the week.\n */\nexport function getDayOfWeek(date, calendarType) {\n    if (calendarType === void 0) { calendarType = CALENDAR_TYPES.ISO_8601; }\n    var weekday = date.getDay();\n    switch (calendarType) {\n        case CALENDAR_TYPES.ISO_8601:\n            // Shifts days of the week so that Monday is 0, Sunday is 6\n            return (weekday + 6) % 7;\n        case CALENDAR_TYPES.ISLAMIC:\n            return (weekday + 1) % 7;\n        case CALENDAR_TYPES.HEBREW:\n        case CALENDAR_TYPES.GREGORY:\n            return weekday;\n        default:\n            throw new Error('Unsupported calendar type.');\n    }\n}\n/**\n * Century\n */\n/**\n * Gets the year of the beginning of a century of a given date.\n * @param {Date} date Date.\n * @returns {number} Year of the beginning of a century.\n */\nexport function getBeginOfCenturyYear(date) {\n    var beginOfCentury = getCenturyStart(date);\n    return getYear(beginOfCentury);\n}\n/**\n * Decade\n */\n/**\n * Gets the year of the beginning of a decade of a given date.\n * @param {Date} date Date.\n * @returns {number} Year of the beginning of a decade.\n */\nexport function getBeginOfDecadeYear(date) {\n    var beginOfDecade = getDecadeStart(date);\n    return getYear(beginOfDecade);\n}\n/**\n * Week\n */\n/**\n * Returns the beginning of a given week.\n *\n * @param {Date} date Date.\n * @param {CalendarType} [calendarType=\"iso8601\"] Calendar type.\n * @returns {Date} Beginning of a given week.\n */\nexport function getBeginOfWeek(date, calendarType) {\n    if (calendarType === void 0) { calendarType = CALENDAR_TYPES.ISO_8601; }\n    var year = getYear(date);\n    var monthIndex = getMonthIndex(date);\n    var day = date.getDate() - getDayOfWeek(date, calendarType);\n    return new Date(year, monthIndex, day);\n}\n/**\n * Gets week number according to ISO 8601 or US standard.\n * In ISO 8601, Arabic and Hebrew week 1 is the one with January 4.\n * In US calendar week 1 is the one with January 1.\n *\n * @param {Date} date Date.\n * @param {CalendarType} [calendarType=\"iso8601\"] Calendar type.\n * @returns {number} Week number.\n */\nexport function getWeekNumber(date, calendarType) {\n    if (calendarType === void 0) { calendarType = CALENDAR_TYPES.ISO_8601; }\n    var calendarTypeForWeekNumber = calendarType === CALENDAR_TYPES.GREGORY ? CALENDAR_TYPES.GREGORY : CALENDAR_TYPES.ISO_8601;\n    var beginOfWeek = getBeginOfWeek(date, calendarType);\n    var year = getYear(date) + 1;\n    var dayInWeekOne;\n    var beginOfFirstWeek;\n    // Look for the first week one that does not come after a given date\n    do {\n        dayInWeekOne = new Date(year, 0, calendarTypeForWeekNumber === CALENDAR_TYPES.ISO_8601 ? 4 : 1);\n        beginOfFirstWeek = getBeginOfWeek(dayInWeekOne, calendarType);\n        year -= 1;\n    } while (date < beginOfFirstWeek);\n    return Math.round((beginOfWeek.getTime() - beginOfFirstWeek.getTime()) / (8.64e7 * 7)) + 1;\n}\n/**\n * Others\n */\n/**\n * Returns the beginning of a given range.\n *\n * @param {RangeType} rangeType Range type (e.g. 'day')\n * @param {Date} date Date.\n * @returns {Date} Beginning of a given range.\n */\nexport function getBegin(rangeType, date) {\n    switch (rangeType) {\n        case 'century':\n            return getCenturyStart(date);\n        case 'decade':\n            return getDecadeStart(date);\n        case 'year':\n            return getYearStart(date);\n        case 'month':\n            return getMonthStart(date);\n        case 'day':\n            return getDayStart(date);\n        default:\n            throw new Error(\"Invalid rangeType: \".concat(rangeType));\n    }\n}\n/**\n * Returns the beginning of a previous given range.\n *\n * @param {RangeType} rangeType Range type (e.g. 'day')\n * @param {Date} date Date.\n * @returns {Date} Beginning of a previous given range.\n */\nexport function getBeginPrevious(rangeType, date) {\n    switch (rangeType) {\n        case 'century':\n            return getPreviousCenturyStart(date);\n        case 'decade':\n            return getPreviousDecadeStart(date);\n        case 'year':\n            return getPreviousYearStart(date);\n        case 'month':\n            return getPreviousMonthStart(date);\n        default:\n            throw new Error(\"Invalid rangeType: \".concat(rangeType));\n    }\n}\n/**\n * Returns the beginning of a next given range.\n *\n * @param {RangeType} rangeType Range type (e.g. 'day')\n * @param {Date} date Date.\n * @returns {Date} Beginning of a next given range.\n */\nexport function getBeginNext(rangeType, date) {\n    switch (rangeType) {\n        case 'century':\n            return getNextCenturyStart(date);\n        case 'decade':\n            return getNextDecadeStart(date);\n        case 'year':\n            return getNextYearStart(date);\n        case 'month':\n            return getNextMonthStart(date);\n        default:\n            throw new Error(\"Invalid rangeType: \".concat(rangeType));\n    }\n}\nexport function getBeginPrevious2(rangeType, date) {\n    switch (rangeType) {\n        case 'decade':\n            return getPreviousDecadeStart(date, -100);\n        case 'year':\n            return getPreviousYearStart(date, -10);\n        case 'month':\n            return getPreviousMonthStart(date, -12);\n        default:\n            throw new Error(\"Invalid rangeType: \".concat(rangeType));\n    }\n}\nexport function getBeginNext2(rangeType, date) {\n    switch (rangeType) {\n        case 'decade':\n            return getNextDecadeStart(date, 100);\n        case 'year':\n            return getNextYearStart(date, 10);\n        case 'month':\n            return getNextMonthStart(date, 12);\n        default:\n            throw new Error(\"Invalid rangeType: \".concat(rangeType));\n    }\n}\n/**\n * Returns the end of a given range.\n *\n * @param {RangeType} rangeType Range type (e.g. 'day')\n * @param {Date} date Date.\n * @returns {Date} End of a given range.\n */\nexport function getEnd(rangeType, date) {\n    switch (rangeType) {\n        case 'century':\n            return getCenturyEnd(date);\n        case 'decade':\n            return getDecadeEnd(date);\n        case 'year':\n            return getYearEnd(date);\n        case 'month':\n            return getMonthEnd(date);\n        case 'day':\n            return getDayEnd(date);\n        default:\n            throw new Error(\"Invalid rangeType: \".concat(rangeType));\n    }\n}\n/**\n * Returns the end of a previous given range.\n *\n * @param {RangeType} rangeType Range type (e.g. 'day')\n * @param {Date} date Date.\n * @returns {Date} End of a previous given range.\n */\nexport function getEndPrevious(rangeType, date) {\n    switch (rangeType) {\n        case 'century':\n            return getPreviousCenturyEnd(date);\n        case 'decade':\n            return getPreviousDecadeEnd(date);\n        case 'year':\n            return getPreviousYearEnd(date);\n        case 'month':\n            return getPreviousMonthEnd(date);\n        default:\n            throw new Error(\"Invalid rangeType: \".concat(rangeType));\n    }\n}\nexport function getEndPrevious2(rangeType, date) {\n    switch (rangeType) {\n        case 'decade':\n            return getPreviousDecadeEnd(date, -100);\n        case 'year':\n            return getPreviousYearEnd(date, -10);\n        case 'month':\n            return getPreviousMonthEnd(date, -12);\n        default:\n            throw new Error(\"Invalid rangeType: \".concat(rangeType));\n    }\n}\n/**\n * Returns an array with the beginning and the end of a given range.\n *\n * @param {RangeType} rangeType Range type (e.g. 'day')\n * @param {Date} date Date.\n * @returns {Date[]} Beginning and end of a given range.\n */\nexport function getRange(rangeType, date) {\n    switch (rangeType) {\n        case 'century':\n            return getCenturyRange(date);\n        case 'decade':\n            return getDecadeRange(date);\n        case 'year':\n            return getYearRange(date);\n        case 'month':\n            return getMonthRange(date);\n        case 'day':\n            return getDayRange(date);\n        default:\n            throw new Error(\"Invalid rangeType: \".concat(rangeType));\n    }\n}\n/**\n * Creates a range out of two values, ensuring they are in order and covering entire period ranges.\n *\n * @param {RangeType} rangeType Range type (e.g. 'day')\n * @param {Date} date1 First date.\n * @param {Date} date2 Second date.\n * @returns {Date[]} Beginning and end of a given range.\n */\nexport function getValueRange(rangeType, date1, date2) {\n    var rawNextValue = [date1, date2].sort(function (a, b) { return a.getTime() - b.getTime(); });\n    return [getBegin(rangeType, rawNextValue[0]), getEnd(rangeType, rawNextValue[1])];\n}\nfunction toYearLabel(locale, formatYear, dates) {\n    if (formatYear === void 0) { formatYear = defaultFormatYear; }\n    return dates.map(function (date) { return formatYear(locale, date); }).join(' â€“ ');\n}\n/**\n * @callback FormatYear\n * @param {string} locale Locale.\n * @param {Date} date Date.\n * @returns {string} Formatted year.\n */\n/**\n * Returns a string labelling a century of a given date.\n * For example, for 2017 it will return 2001-2100.\n *\n * @param {string} locale Locale.\n * @param {FormatYear} formatYear Function to format a year.\n * @param {Date|string|number} date Date or a year as a string or as a number.\n * @returns {string} String labelling a century of a given date.\n */\nexport function getCenturyLabel(locale, formatYear, date) {\n    return toYearLabel(locale, formatYear, getCenturyRange(date));\n}\n/**\n * Returns a string labelling a decade of a given date.\n * For example, for 2017 it will return 2011-2020.\n *\n * @param {string} locale Locale.\n * @param {FormatYear} formatYear Function to format a year.\n * @param {Date|string|number} date Date or a year as a string or as a number.\n * @returns {string} String labelling a decade of a given date.\n */\nexport function getDecadeLabel(locale, formatYear, date) {\n    return toYearLabel(locale, formatYear, getDecadeRange(date));\n}\n/**\n * Returns a boolean determining whether a given date is the current day of the week.\n *\n * @param {Date} date Date.\n * @returns {boolean} Whether a given date is the current day of the week.\n */\nexport function isCurrentDayOfWeek(date) {\n    return date.getDay() === new Date().getDay();\n}\n/**\n * Returns a boolean determining whether a given date is a weekend day.\n *\n * @param {Date} date Date.\n * @param {CalendarType} [calendarType=\"iso8601\"] Calendar type.\n * @returns {boolean} Whether a given date is a weekend day.\n */\nexport function isWeekend(date, calendarType) {\n    if (calendarType === void 0) { calendarType = CALENDAR_TYPES.ISO_8601; }\n    var weekday = date.getDay();\n    switch (calendarType) {\n        case CALENDAR_TYPES.ISLAMIC:\n        case CALENDAR_TYPES.HEBREW:\n            return weekday === FRIDAY || weekday === SATURDAY;\n        case CALENDAR_TYPES.ISO_8601:\n        case CALENDAR_TYPES.GREGORY:\n            return weekday === SATURDAY || weekday === SUNDAY;\n        default:\n            throw new Error('Unsupported calendar type.');\n    }\n}\n"]},"metadata":{},"sourceType":"module"}