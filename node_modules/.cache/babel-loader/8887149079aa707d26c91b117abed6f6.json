{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Documents\\\\REACT\\\\curso-react-alura\\\\src\\\\teste_V1.js\";\nimport React, { useState } from 'react';\nimport { Calendar } from 'react-calendar';\nimport 'react-calendar/dist/Calendar.css';\n\nconst DateRangePicker = () => {\n  const [dateRange, setDateRange] = useState([null, null]);\n  const [showCalendar, setShowCalendar] = useState(false);\n\n  const handleDateChange = date => {\n    if (dateRange[0] === null) {\n      setDateRange([date, null]);\n    } else if (dateRange[1] === null && date >= dateRange[0]) {\n      setDateRange([dateRange[0], date]);\n      setShowCalendar(false);\n    } else {\n      setDateRange([date, null]);\n    }\n  };\n\n  const handleToggleCalendar = () => {\n    setShowCalendar(!showCalendar);\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"button\", {\n    onClick: handleToggleCalendar,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }\n  }, dateRange[0] && dateRange[1] ? `Período Selecionado: ${dateRange[0].toDateString()} - ${dateRange[1].toDateString()}` : 'Selecionar Período'), showCalendar && /*#__PURE__*/React.createElement(Calendar, {\n    selectRange: true,\n    onChange: handleDateChange,\n    value: dateRange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }));\n};\n\nexport default DateRangePicker;","map":{"version":3,"sources":["C:/Users/Lenovo/Documents/REACT/curso-react-alura/src/teste_V1.js"],"names":["React","useState","Calendar","DateRangePicker","dateRange","setDateRange","showCalendar","setShowCalendar","handleDateChange","date","handleToggleCalendar","toDateString"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAO,kCAAP;;AAEA,MAAMC,eAAe,GAAG,MAAM;AAC5B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BJ,QAAQ,CAAC,CAAC,IAAD,EAAO,IAAP,CAAD,CAA1C;AACA,QAAM,CAACK,YAAD,EAAeC,eAAf,IAAkCN,QAAQ,CAAC,KAAD,CAAhD;;AAEA,QAAMO,gBAAgB,GAAIC,IAAD,IAAU;AACjC,QAAIL,SAAS,CAAC,CAAD,CAAT,KAAiB,IAArB,EAA2B;AACzBC,MAAAA,YAAY,CAAC,CAACI,IAAD,EAAO,IAAP,CAAD,CAAZ;AACD,KAFD,MAEO,IAAIL,SAAS,CAAC,CAAD,CAAT,KAAiB,IAAjB,IAAyBK,IAAI,IAAIL,SAAS,CAAC,CAAD,CAA9C,EAAmD;AACxDC,MAAAA,YAAY,CAAC,CAACD,SAAS,CAAC,CAAD,CAAV,EAAeK,IAAf,CAAD,CAAZ;AACAF,MAAAA,eAAe,CAAC,KAAD,CAAf;AACD,KAHM,MAGA;AACLF,MAAAA,YAAY,CAAC,CAACI,IAAD,EAAO,IAAP,CAAD,CAAZ;AACD;AACF,GATD;;AAWA,QAAMC,oBAAoB,GAAG,MAAM;AACjCH,IAAAA,eAAe,CAAC,CAACD,YAAF,CAAf;AACD,GAFD;;AAIA,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAQ,IAAA,OAAO,EAAEI,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGN,SAAS,CAAC,CAAD,CAAT,IAAgBA,SAAS,CAAC,CAAD,CAAzB,GACI,wBAAuBA,SAAS,CAAC,CAAD,CAAT,CAAaO,YAAb,EAA4B,MAAKP,SAAS,CAAC,CAAD,CAAT,CAAaO,YAAb,EAA4B,EADxF,GAEG,oBAHN,CADF,EAMGL,YAAY,iBACX,oBAAC,QAAD;AACE,IAAA,WAAW,MADb;AAEE,IAAA,QAAQ,EAAEE,gBAFZ;AAGE,IAAA,KAAK,EAAEJ,SAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAPJ,CADF;AAgBD,CAnCD;;AAqCA,eAAeD,eAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { Calendar } from 'react-calendar';\r\nimport 'react-calendar/dist/Calendar.css';\r\n\r\nconst DateRangePicker = () => {\r\n  const [dateRange, setDateRange] = useState([null, null]);\r\n  const [showCalendar, setShowCalendar] = useState(false);\r\n\r\n  const handleDateChange = (date) => {\r\n    if (dateRange[0] === null) {\r\n      setDateRange([date, null]);\r\n    } else if (dateRange[1] === null && date >= dateRange[0]) {\r\n      setDateRange([dateRange[0], date]);\r\n      setShowCalendar(false);\r\n    } else {\r\n      setDateRange([date, null]);\r\n    }\r\n  };\r\n\r\n  const handleToggleCalendar = () => {\r\n    setShowCalendar(!showCalendar);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <button onClick={handleToggleCalendar}>\r\n        {dateRange[0] && dateRange[1]\r\n          ? `Período Selecionado: ${dateRange[0].toDateString()} - ${dateRange[1].toDateString()}`\r\n          : 'Selecionar Período'}\r\n      </button>\r\n      {showCalendar && (\r\n        <Calendar\r\n          selectRange\r\n          onChange={handleDateChange}\r\n          value={dateRange}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DateRangePicker;\r\n"]},"metadata":{},"sourceType":"module"}