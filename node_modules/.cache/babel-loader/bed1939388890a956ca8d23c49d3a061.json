{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lenovo\\\\Documents\\\\REACT\\\\curso-react-alura\\\\src\\\\App.js\";\nimport React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport UserList from './UserList';\nimport UserPage from './UserPage';\nimport './App.css';\n\nconst App = () => {\n  // Estado para armazenar os usuários\n  const [users, setUsers] = useState([]); // Carregar dados do localStorage quando o componente é montado\n\n  useEffect(() => {\n    const savedUsers = localStorage.getItem('users');\n\n    if (savedUsers) {\n      setUsers(JSON.parse(savedUsers));\n    }\n  }, []); // Salvar dados no localStorage sempre que o estado 'users' mudar\n\n  useEffect(() => {\n    localStorage.setItem('users', JSON.stringify(users));\n  }, [users]); // Função para adicionar uma nota a um usuário\n\n  const addNote = (userId, note) => {\n    // Atualizar a lista de usuários com a nova nota\n    const updatedUsers = users.map(user => user.id === userId ? { ...user,\n      notes: [...user.notes, note]\n    } : user);\n    setUsers(updatedUsers);\n  }; // Função para remover uma nota de um usuário\n\n\n  const removeNote = (userId, noteIndex) => {\n    // Atualizar a lista de usuários removendo a nota\n    const updatedUsers = users.map(user => user.id === userId ? { ...user,\n      notes: user.notes.filter((_, index) => index !== noteIndex)\n    } : user);\n    setUsers(updatedUsers);\n  };\n\n  return /*#__PURE__*/React.createElement(Router, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"container\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(Routes, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Route, {\n    path: \"/\",\n    element: /*#__PURE__*/React.createElement(UserList, {\n      users: users,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 36\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(Route, {\n    path: \"/user/:id\",\n    element: /*#__PURE__*/React.createElement(UserPage, {\n      users: users,\n      addNote: addNote,\n      removeNote: removeNote,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 44\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 11\n    }\n  }))));\n};\n\nexport default App;","map":{"version":3,"sources":["C:/Users/Lenovo/Documents/REACT/curso-react-alura/src/App.js"],"names":["React","useState","useEffect","BrowserRouter","Router","Route","Routes","UserList","UserPage","App","users","setUsers","savedUsers","localStorage","getItem","JSON","parse","setItem","stringify","addNote","userId","note","updatedUsers","map","user","id","notes","removeNote","noteIndex","filter","_","index"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,SAASC,aAAa,IAAIC,MAA1B,EAAkCC,KAAlC,EAAyCC,MAAzC,QAAuD,kBAAvD;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,WAAP;;AAEA,MAAMC,GAAG,GAAG,MAAM;AAChB;AACA,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBV,QAAQ,CAAC,EAAD,CAAlC,CAFgB,CAIhB;;AACAC,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqB,OAArB,CAAnB;;AACA,QAAIF,UAAJ,EAAgB;AACdD,MAAAA,QAAQ,CAACI,IAAI,CAACC,KAAL,CAAWJ,UAAX,CAAD,CAAR;AACD;AACF,GALQ,EAKN,EALM,CAAT,CALgB,CAYhB;;AACAV,EAAAA,SAAS,CAAC,MAAM;AACdW,IAAAA,YAAY,CAACI,OAAb,CAAqB,OAArB,EAA8BF,IAAI,CAACG,SAAL,CAAeR,KAAf,CAA9B;AACD,GAFQ,EAEN,CAACA,KAAD,CAFM,CAAT,CAbgB,CAiBhB;;AACA,QAAMS,OAAO,GAAG,CAACC,MAAD,EAASC,IAAT,KAAkB;AAChC;AACA,UAAMC,YAAY,GAAGZ,KAAK,CAACa,GAAN,CAAUC,IAAI,IACjCA,IAAI,CAACC,EAAL,KAAYL,MAAZ,GAAqB,EAAE,GAAGI,IAAL;AAAWE,MAAAA,KAAK,EAAE,CAAC,GAAGF,IAAI,CAACE,KAAT,EAAgBL,IAAhB;AAAlB,KAArB,GAAiEG,IAD9C,CAArB;AAGAb,IAAAA,QAAQ,CAACW,YAAD,CAAR;AACD,GAND,CAlBgB,CA0BhB;;;AACA,QAAMK,UAAU,GAAG,CAACP,MAAD,EAASQ,SAAT,KAAuB;AACxC;AACA,UAAMN,YAAY,GAAGZ,KAAK,CAACa,GAAN,CAAUC,IAAI,IACjCA,IAAI,CAACC,EAAL,KAAYL,MAAZ,GAAqB,EAAE,GAAGI,IAAL;AAAWE,MAAAA,KAAK,EAAEF,IAAI,CAACE,KAAL,CAAWG,MAAX,CAAkB,CAACC,CAAD,EAAIC,KAAJ,KAAcA,KAAK,KAAKH,SAA1C;AAAlB,KAArB,GAAgGJ,IAD7E,CAArB;AAGAb,IAAAA,QAAQ,CAACW,YAAD,CAAR;AACD,GAND;;AAQA,sBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAK,IAAA,SAAS,EAAC,WAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,GAAZ;AAAgB,IAAA,OAAO,eAAE,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAEZ,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAEE,oBAAC,KAAD;AAAO,IAAA,IAAI,EAAC,WAAZ;AAAwB,IAAA,OAAO,eAAE,oBAAC,QAAD;AAAU,MAAA,KAAK,EAAEA,KAAjB;AAAwB,MAAA,OAAO,EAAES,OAAjC;AAA0C,MAAA,UAAU,EAAEQ,UAAtD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFF,CADF,CADF,CADF;AAUD,CA7CD;;AA+CA,eAAelB,GAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\nimport UserList from './UserList';\nimport UserPage from './UserPage';\nimport './App.css';\n\nconst App = () => {\n  // Estado para armazenar os usuários\n  const [users, setUsers] = useState([]);\n\n  // Carregar dados do localStorage quando o componente é montado\n  useEffect(() => {\n    const savedUsers = localStorage.getItem('users');\n    if (savedUsers) {\n      setUsers(JSON.parse(savedUsers));\n    }\n  }, []);\n\n  // Salvar dados no localStorage sempre que o estado 'users' mudar\n  useEffect(() => {\n    localStorage.setItem('users', JSON.stringify(users));\n  }, [users]);\n\n  // Função para adicionar uma nota a um usuário\n  const addNote = (userId, note) => {\n    // Atualizar a lista de usuários com a nova nota\n    const updatedUsers = users.map(user =>\n      user.id === userId ? { ...user, notes: [...user.notes, note] } : user\n    );\n    setUsers(updatedUsers);\n  };\n\n  // Função para remover uma nota de um usuário\n  const removeNote = (userId, noteIndex) => {\n    // Atualizar a lista de usuários removendo a nota\n    const updatedUsers = users.map(user =>\n      user.id === userId ? { ...user, notes: user.notes.filter((_, index) => index !== noteIndex) } : user\n    );\n    setUsers(updatedUsers);\n  };\n\n  return (\n    <Router>\n      <div className=\"container\">\n        <Routes>\n          <Route path=\"/\" element={<UserList users={users} />} />\n          <Route path=\"/user/:id\" element={<UserPage users={users} addNote={addNote} removeNote={removeNote} />} />\n        </Routes>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}