{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n\n    return t;\n  };\n\n  return __assign.apply(this, arguments);\n};\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { getYear, getMonth, getDaysInMonth, getDayStart } from '@wojtekmaj/date-utils';\nimport TileGroup from '../TileGroup.js';\nimport Day from './Day.js';\nimport { getDayOfWeek } from '../shared/dates.js';\nexport default function Days(props) {\n  var activeStartDate = props.activeStartDate,\n      calendarType = props.calendarType,\n      hover = props.hover,\n      showFixedNumberOfWeeks = props.showFixedNumberOfWeeks,\n      showNeighboringMonth = props.showNeighboringMonth,\n      value = props.value,\n      valueType = props.valueType,\n      otherProps = __rest(props, [\"activeStartDate\", \"calendarType\", \"hover\", \"showFixedNumberOfWeeks\", \"showNeighboringMonth\", \"value\", \"valueType\"]);\n\n  var year = getYear(activeStartDate);\n  var monthIndex = getMonth(activeStartDate);\n  var hasFixedNumberOfWeeks = showFixedNumberOfWeeks || showNeighboringMonth;\n  var dayOfWeek = getDayOfWeek(activeStartDate, calendarType);\n  var offset = hasFixedNumberOfWeeks ? 0 : dayOfWeek;\n  /**\n   * Defines on which day of the month the grid shall start. If we simply show current\n   * month, we obviously start on day one, but if showNeighboringMonth is set to\n   * true, we need to find the beginning of the week the first day of the month is in.\n   */\n\n  var start = (hasFixedNumberOfWeeks ? -dayOfWeek : 0) + 1;\n  /**\n   * Defines on which day of the month the grid shall end. If we simply show current\n   * month, we need to stop on the last day of the month, but if showNeighboringMonth\n   * is set to true, we need to find the end of the week the last day of the month is in.\n   */\n\n  var end = function () {\n    if (showFixedNumberOfWeeks) {\n      // Always show 6 weeks\n      return start + 6 * 7 - 1;\n    }\n\n    var daysInMonth = getDaysInMonth(activeStartDate);\n\n    if (showNeighboringMonth) {\n      var activeEndDate = new Date();\n      activeEndDate.setFullYear(year, monthIndex, daysInMonth);\n      activeEndDate.setHours(0, 0, 0, 0);\n      var daysUntilEndOfTheWeek = 7 - getDayOfWeek(activeEndDate, calendarType) - 1;\n      return daysInMonth + daysUntilEndOfTheWeek;\n    }\n\n    return daysInMonth;\n  }();\n\n  return _jsx(TileGroup, {\n    className: \"react-calendar__month-view__days\",\n    count: 7,\n    dateTransform: function (day) {\n      var date = new Date();\n      date.setFullYear(year, monthIndex, day);\n      return getDayStart(date);\n    },\n    dateType: \"day\",\n    hover: hover,\n    end: end,\n    renderTile: function (_a) {\n      var date = _a.date,\n          otherTileProps = __rest(_a, [\"date\"]);\n\n      return _jsx(Day, __assign({}, otherProps, otherTileProps, {\n        activeStartDate: activeStartDate,\n        calendarType: calendarType,\n        currentMonthIndex: monthIndex,\n        date: date\n      }), date.getTime());\n    },\n    offset: offset,\n    start: start,\n    value: value,\n    valueType: valueType\n  });\n}","map":{"version":3,"sources":["C:/Users/Lenovo/Documents/REACT/curso-react-alura/node_modules/react-calendar/dist/esm/MonthView/Days.js"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","jsx","_jsx","getYear","getMonth","getDaysInMonth","getDayStart","TileGroup","Day","getDayOfWeek","Days","props","activeStartDate","calendarType","hover","showFixedNumberOfWeeks","showNeighboringMonth","value","valueType","otherProps","year","monthIndex","hasFixedNumberOfWeeks","dayOfWeek","offset","start","end","daysInMonth","activeEndDate","Date","setFullYear","setHours","daysUntilEndOfTheWeek","className","count","dateTransform","day","date","dateType","renderTile","_a","otherTileProps","currentMonthIndex","getTime"],"mappings":"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","sourcesContent":["var __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { getYear, getMonth, getDaysInMonth, getDayStart } from '@wojtekmaj/date-utils';\nimport TileGroup from '../TileGroup.js';\nimport Day from './Day.js';\nimport { getDayOfWeek } from '../shared/dates.js';\nexport default function Days(props) {\n    var activeStartDate = props.activeStartDate, calendarType = props.calendarType, hover = props.hover, showFixedNumberOfWeeks = props.showFixedNumberOfWeeks, showNeighboringMonth = props.showNeighboringMonth, value = props.value, valueType = props.valueType, otherProps = __rest(props, [\"activeStartDate\", \"calendarType\", \"hover\", \"showFixedNumberOfWeeks\", \"showNeighboringMonth\", \"value\", \"valueType\"]);\n    var year = getYear(activeStartDate);\n    var monthIndex = getMonth(activeStartDate);\n    var hasFixedNumberOfWeeks = showFixedNumberOfWeeks || showNeighboringMonth;\n    var dayOfWeek = getDayOfWeek(activeStartDate, calendarType);\n    var offset = hasFixedNumberOfWeeks ? 0 : dayOfWeek;\n    /**\n     * Defines on which day of the month the grid shall start. If we simply show current\n     * month, we obviously start on day one, but if showNeighboringMonth is set to\n     * true, we need to find the beginning of the week the first day of the month is in.\n     */\n    var start = (hasFixedNumberOfWeeks ? -dayOfWeek : 0) + 1;\n    /**\n     * Defines on which day of the month the grid shall end. If we simply show current\n     * month, we need to stop on the last day of the month, but if showNeighboringMonth\n     * is set to true, we need to find the end of the week the last day of the month is in.\n     */\n    var end = (function () {\n        if (showFixedNumberOfWeeks) {\n            // Always show 6 weeks\n            return start + 6 * 7 - 1;\n        }\n        var daysInMonth = getDaysInMonth(activeStartDate);\n        if (showNeighboringMonth) {\n            var activeEndDate = new Date();\n            activeEndDate.setFullYear(year, monthIndex, daysInMonth);\n            activeEndDate.setHours(0, 0, 0, 0);\n            var daysUntilEndOfTheWeek = 7 - getDayOfWeek(activeEndDate, calendarType) - 1;\n            return daysInMonth + daysUntilEndOfTheWeek;\n        }\n        return daysInMonth;\n    })();\n    return (_jsx(TileGroup, { className: \"react-calendar__month-view__days\", count: 7, dateTransform: function (day) {\n            var date = new Date();\n            date.setFullYear(year, monthIndex, day);\n            return getDayStart(date);\n        }, dateType: \"day\", hover: hover, end: end, renderTile: function (_a) {\n            var date = _a.date, otherTileProps = __rest(_a, [\"date\"]);\n            return (_jsx(Day, __assign({}, otherProps, otherTileProps, { activeStartDate: activeStartDate, calendarType: calendarType, currentMonthIndex: monthIndex, date: date }), date.getTime()));\n        }, offset: offset, start: start, value: value, valueType: valueType }));\n}\n"]},"metadata":{},"sourceType":"module"}